{"version":3,"sources":["InfoBox.js","LineGraph.js","Table.js","util.js","Map.js","App.js","reportWebVitals.js","index.js"],"names":["infoBox","title","cases","total","props","Card","onClick","className","CardContent","Typography","color","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","Table","countries","map","country","casesTypeColors","hex","multiplier","recovered","deaths","sortData","sortedData","sort","b","prettyPrintStat","stat","showDataOnMap","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","Map","zoom","TileLayer","url","attribution","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","isRed","active","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d7e3496.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\nimport \"./InfoBox.css\";\r\nfunction infoBox({ title, cases, total, ...props }) {\r\n    return (\r\n        <Card\r\n            onClick={props.onClick} className=\"infoBox\">\r\n            <CardContent>\r\n                <Typography color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n\r\n                <h2 className=\"infoBox_cases\">{cases}</h2>\r\n\r\n\r\n                <Typography className=\"infoBox_total\" color=\"textSecondary\">\r\n                    {total}Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default infoBox","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    // Include a dollar sign in the ticks\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n    const [data, setData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n                .then((response) => {\r\n                    return response.json();\r\n                })\r\n                .then((data) => {\r\n                    let chartData = buildChartData(data, casesType);\r\n                    setData(chartData);\r\n                    console.log(chartData);\r\n                    // buildChart(chartData);\r\n                });\r\n        };\r\n\r\n        fetchData();\r\n    }, [casesType]);\r\n\r\n    return (\r\n        <div>\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                                borderColor: \"#CC1034\",\r\n                                data: data,\r\n                            },\r\n                        ],\r\n                    }}\r\n                    options={options}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph;","import React from 'react';\r\nimport './Table.css';\r\nimport numeral from \"numeral\";\r\n\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({ country, cases }) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n                    </td>\r\n                </tr>\r\n\r\n            ))}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n\r\n        multiplier: 2000,\r\n    },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    let sortedData = [...data];\r\n    sortedData.sort((a, b) => {\r\n        if (a.cases > b.cases) {\r\n            return -1;\r\n        } else {\r\n            return 1;\r\n        }\r\n    });\r\n    return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n    data.map((country) => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            fillOpacity={0.4}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div\r\n                        className=\"info-flag\"\r\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                    ></div>\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">\r\n                        Cases: {numeral(country.cases).format(\"0,0\")}\r\n                    </div>\r\n                    <div className=\"info-recovered\">\r\n                        Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n                    </div>\r\n                    <div className=\"info-deaths\">\r\n                        Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n                    </div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ));","import React from \"react\";\r\nimport { MapContainer as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  console.log(casesType);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app_stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app_right\">\n        <CardContent>\n          <div className=\"app_information\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}